/*OBS - CLIENT USADO DBEAVER, CLAUSULA DE FECHAMENTO GO EXCLUSIVA NO SERVER MANAGEMENT STUDIO*/


/***************************************************************************/
/**TRIGGERS NO SQL SERVER - GATILHO DISPARADO AUTOMATICAMENTE**/
/*DISPARADO ANTES/BEFORE OU DEPOIS/AFTER DE INSERT, DELETE OU UPTDATE*/

/*CRIANDO TABELA - OBS NUMERIC EQUIVALE E FLOAT*/
CREATE TABLE PRODUTOS(
	IDPRODUTO INT IDENTITY PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECO NUMERIC(10,2) NOT NULL
);

CREATE TABLE HISTORICO(
	IDOPERACAO INT PRIMARY KEY IDENTITY,
	PRODUTO VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(50) NOT NULL,
	PRECO_ANTIGO NUMERIC(10,2) NOT NULL,
	PRECO_NOVO NUMERIC(10,2) NOT NULL,
	DATA DATETIME,
	USUARIO VARCHAR(30),
	MENSAGEM VARCHAR(100)
);

/*INSERINDO DADOS*/
INSERT INTO PRODUTOS VALUES('LIVRO SQL SERVER', 'LIVRO', 98.00)
INSERT INTO PRODUTOS VALUES('LIVRO ORACLE', 'LIVRO', 50.00)
INSERT INTO PRODUTOS VALUES('LICENÃ‡A POWERCENTER', 'SOFTWARE', 45000.00)
INSERT INTO PRODUTOS VALUES('NOTEBOOK I7', 'COMPUTADOR', 3150.00)
INSERT INTO PRODUTOS VALUES('LIVRO BUSINESS INTELIGENCE', 'LIVROS', 90.00);

/*CONSULTANDO DADOS*/
SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO;

/*VERIFICANDO O USUARIO*/
SELECT SUSER_NAME();

/***************************************************************************/
/**TRIGGER DE DADOS - DML (DATA MANIPULATION  LANGUAGE)**/
/*REGISTRA QUANDO EXISTE MUDANCA DE VALOR, POREM TAMBEM REGISTRA OUTROS UPDATES*/
/*TRIGGER - TRG*/

CREATE TRIGGER TRG_ATUALIZA_PRECO
ON DBO.PRODUTOS 
FOR UPDATE 
AS 
	/*DECLARACAO DAS VARIAVEIS*/
	DECLARE @IDPRODUTO INT
	DECLARE @PRODUTO VARCHAR(30)
	DECLARE @CATEGORIA VARCHAR(10)
	DECLARE @PRECO NUMERIC(10,2)
	DECLARE @PRECO_NOVO NUMERIC(10,2)
	DECLARE @DATA DATETIME
	DECLARE @USUARIO VARCHAR(30)
	DECLARE @MENSAGEM VARCHAR(100)
	/*VALORES DE TABELAS INSERIDOS COM SELECT*/
	SELECT @IDPRODUTO = IDPRODUTO FROM INSERTED
	SELECT @PRODUTO = NOME FROM INSERTED
	SELECT @CATEGORIA = CATEGORIA FROM INSERTED
	SELECT @PRECO = PRECO FROM DELETED
	SELECT @PRECO_NOVO = PRECO FROM INSERTED
	/*VALORES DE FUNCOES/VALOR.LITERAIS ATRIBUIDOS COM SET*/
	SET @DATA = GETDATE()
	SET @USUARIO = SUSER_NAME()
	SET @MENSAGEM = 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'
	/*INSERINDO VALORES*/
	INSERT INTO HISTORICO(PRODUTO, CATEGORIA, PRECO_ANTIGO, PRECO_NOVO, DATA, USUARIO, MENSAGEM)
	VALUES(@PRODUTO, @CATEGORIA, @PRECO, @PRECO_NOVO, @DATA, @USUARIO, @MENSAGEM)
	PRINT 'TRIGGER EXECUTADA COM SUCESSO';

/*EXECUTANDO UM UPDATE PARA ATIVAR A TRIGGER*/
UPDATE PRODUTOS SET PRECO = 100
WHERE IDPRODUTO = 1;


/*CONSULTANDO DADOS DEPOIS DE ATIVAR A TRIGGER*/
SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO;

/*EXECUTANDO UPDATE PARA MUDAR NOME*/
UPDATE PRODUTOS SET NOME = 'LIVRO C#'
WHERE IDPRODUTO = 1;


/*CONSULTANDO DADOS DEPOIS DE ATIVAR A TRIGGER*/
SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO;


/*APAGANDO UMA TRINGGER*/
DROP TRIGGER TRG_ATUALIZA_PRECO;

/***************************************************************************/
/**PROGRAMANDO TRIGGER EM UMA COLUNA**/
/*LINGUAGEM TSQL (TRANSATIONAL SQL LANGUAGE)*/
/*REGISTRAR NO HISTORICO SOMENTE MUDANCAS DE PRECO*/

CREATE TRIGGER TRG_ATUALIZA_PRECO
ON DBO.PRODUTOS 
FOR UPDATE AS 
IF UPDATE(PRECO)
BEGIN
	/*DECLARACAO DAS VARIAVEIS*/
	DECLARE @IDPRODUTO INT
	DECLARE @PRODUTO VARCHAR(30)
	DECLARE @CATEGORIA VARCHAR(10)
	DECLARE @PRECO NUMERIC(10,2)
	DECLARE @PRECO_NOVO NUMERIC(10,2)
	DECLARE @DATA DATETIME
	DECLARE @USUARIO VARCHAR(30)
	DECLARE @MENSAGEM VARCHAR(100)
	/*VALORES DE TABELAS INSERIDOS COM SELECT*/
	SELECT @IDPRODUTO = IDPRODUTO FROM INSERTED
	SELECT @PRODUTO = NOME FROM INSERTED
	SELECT @CATEGORIA = CATEGORIA FROM INSERTED
	SELECT @PRECO = PRECO FROM DELETED
	SELECT @PRECO_NOVO = PRECO FROM INSERTED
	/*VALORES DE FUNCOES/VALOR.LITERAIS ATRIBUIDOS COM SET*/
	SET @DATA = GETDATE()
	SET @USUARIO = SUSER_NAME()
	SET @MENSAGEM = 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'
	/*INSERINDO VALORES*/
	INSERT INTO HISTORICO(PRODUTO, CATEGORIA, PRECO_ANTIGO, PRECO_NOVO, DATA, USUARIO, MENSAGEM)
	VALUES(@PRODUTO, @CATEGORIA, @PRECO, @PRECO_NOVO, @DATA, @USUARIO, @MENSAGEM)
	PRINT 'TRIGGER EXECUTADA COM SUCESSO'
END;

/*EXECUTANDO UM UPDATE PARA ATIVAR A TRIGGER*/
UPDATE PRODUTOS SET PRECO = 300
WHERE IDPRODUTO = 2;


/*CONSULTANDO DADOS DEPOIS DE ATIVAR A TRIGGER*/
SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO;

/*EXECUTANDO UPDATE PARA MUDAR NOME*/
UPDATE PRODUTOS SET NOME = 'LIVRO JAVA'
WHERE IDPRODUTO = 2;


/*CONSULTANDO DADOS DEPOIS DE ATIVAR A TRIGGER*/
SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO;


/***************************************************************************/
/**SIMPLIFICANDO E OTIMIZANDO TRIGGERS UTILIZANDO SELECT**/
/*VARIAVEIS COM SELECT*/
SELECT 10 + 10;


/*CRIANDO TABELA*/
CREATE TABLE RESULTADO(
	IRESULTADO INT PRIMARY KEY IDENTITY,
	RESULTADO INT
);

/*INSERINDO DADOS*/
INSERT INTO RESULTADO VALUES((SELECT 10 + 10));

/*CONSULTANDO DADOS*/
SELECT * FROM RESULTADO;

/*ATRIBUINDO SELECTS A VARIAVEIS - ANONIMO*/
/*EXECUTADO UMA VEZ E NAO ARMAZENADO EM BANCO - MUITO USADO EM TESTES*/
DECLARE
	@RESULTADO INT
	SET @RESULTADO = (SELECT 50 + 50)
	INSERT INTO RESULTADO VALUES (@RESULTADO)
	PRINT 'VALOR INSERIDO NA TABELA: '+ CAST(@RESULTADO AS VARCHAR);

/*CONSULTANDO DADOS*/
SELECT * FROM RESULTADO;

/*TRIGGER UPDATE*/
/*CRIANDO TABELA*/
CREATE TABLE EMPREGADO(
	IDEMPREGADO INT PRIMARY KEY,
	NOME VARCHAR(30),
	SALARIO MONEY,
	IDGERENTE INT
);

/*CRIANDO CHAVE ESTRANGEIRA*/
ALTER TABLE EMPREGADO ADD CONSTRAINT FK_GERENTE
FOREIGN KEY(IDGERENTE) REFERENCES EMPREGADO(IDEMPREGADO);

/*INSERINDO DADOS*/
INSERT INTO EMPREGADO VALUES(1, 'CLARA', 5000.00, NULL)
INSERT INTO EMPREGADO VALUES(2, 'CELIA', 4000.00, 1)
INSERT INTO EMPREGADO VALUES(3, 'JOAO', 4000.00, 1);

/*CRIANDO TABELA*/
CREATE TABLE HIST_SALARIO(
	IDEMPREGADO INT,
	ANTIGO_SALARIO MONEY,
	NOVO_SALARIO MONEY,
	DATA DATETIME
);

/*CRIANDO TRIGGER*/
CREATE TRIGGER TRG_SALARIO
ON DBO.EMPREGADO 
FOR UPDATE AS 
IF UPDATE(SALARIO)
BEGIN
	INSERT INTO HIST_SALARIO
	(IDEMPREGADO, ANTIGO_SALARIO, NOVO_SALARIO, DATA)
	SELECT D.IDEMPREGADO, D.SALARIO, I.SALARIO, GETDATE()
	FROM DELETED D, INSERTED I
	WHERE D.IDEMPREGADO = I.IDEMPREGADO
	
END;

/*ATUALIZACAO DE DADOS*/
UPDATE EMPREGADO SET SALARIO = SALARIO * 1.1

/*CONSULTANDO DADOS*/
SELECT * FROM EMPREGADO;


SELECT * FROM HIST_SALARIO;


/***************************************************************************/
/**TRIGGERS DE RANGE - INTRODUCAO A TRANSACOES**/

/*CRIACAO DE TABELA*/
CREATE TABLE SALARIO_RANGE(
	MIN_SALARIO MONEY,
	MAX_SALARIO MONEY
);

/*INSERINDO DADOS*/
INSERT INTO SALARIO_RANGE VALUES(3000.00, 6000.00);

/*CRIACAO DA TRIGGER*/
CREATE TRIGGER TRG_RANGE
ON DBO.EMPREGADO
FOR INSERT, UPDATE
AS 
	DECLARE
		@MIN_SALARIO MONEY,
		@MAX_SALARIO MONEY,
		@ATUAL_SALARIO MONEY
	SELECT @MIN_SALARIO = MIN_SALARIO, @MAX_SALARIO = MAX_SALARIO FROM SALARIO_RANGE
	SELECT @ATUAL_SALARIO = I.SALARIO
	FROM INSERTED I
	IF(@ATUAL_SALARIO < @MIN_SALARIO)
	BEGIN
		RAISERROR('SALARIO MENOR QUE O PISO', 16, 1)
		ROLLBACK TRANSACTION
	END
	IF(@ATUAL_SALARIO > @MAX_SALARIO)
	BEGIN
		RAISERROR('SALARIO MAIOR QUE O TETO', 16, 1)
		ROLLBACK TRANSACTION
	END;
	
		
/*FAZENDO ATUALIZACOES DEPOIS DA TRIGGER - MAIOR QUE O TETO*/
UPDATE EMPREGADO SET SALARIO = 9000.00
WHERE IDEMPREGADO = 1;


/*FAZENDO ATUALIZACOES DEPOIS DA TRIGGER - MENOR QUE O PISO*/
UPDATE EMPREGADO SET SALARIO = 1000.00
WHERE IDEMPREGADO = 1;


/*VERIFICANDO O TEXTO DE UMA TRIGGER*/
SP_HELPTEXT TRG_RANGE;









